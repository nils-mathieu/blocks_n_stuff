use bytemuck::Contiguous;
use glam::{IVec2, IVec3};

use crate::biomemap::Climate;

/// A unique identifier for the biomes generated by the standard world generator.
#[derive(Default, Clone, Copy, PartialEq, Eq, Hash, Debug, Contiguous)]
#[repr(u8)]
#[allow(dead_code)] // biomes are generally constructed through transmutation
pub enum BiomeId {
    #[default]
    Void,
    Plains,
    OakForest,
    Desert,
    PineForest,
    ShallowOcean,
    DeepOcean,
}

impl BiomeId {
    /// The total number of [`BiomeId`] instances.
    pub const COUNT: usize = <Self as Contiguous>::MAX_VALUE as usize + 1;

    /// Returns information about the biome.
    #[inline]
    pub fn info(self) -> &'static BiomeInfo {
        const INFOS: [BiomeInfo; BiomeId::COUNT] = [
            // Void
            BiomeInfo {
                continentality_range: (0.0, 0.0),
                temperature_range: (0.0, 0.0),
                humidity_range: (0.0, 0.0),
                weight: 0,
            },
            // Plains
            BiomeInfo {
                continentality_range: (0.0, 1.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
            // OakForest
            BiomeInfo {
                continentality_range: (0.0, 1.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
            // Desert
            BiomeInfo {
                continentality_range: (0.0, 1.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
            // PineForest
            BiomeInfo {
                continentality_range: (0.0, 1.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
            // ShallowOcean
            BiomeInfo {
                continentality_range: (-1.0, 0.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
            // DeepOcean
            BiomeInfo {
                continentality_range: (-1.0, 0.0),
                temperature_range: (-1.0, 1.0),
                humidity_range: (-1.0, 1.0),
                weight: 100,
            },
        ];

        unsafe { INFOS.get_unchecked(self as usize) }
    }

    /// Returns an iterator over all possible [`BiomeId`]s, excluding [`BiomeId::Void`].
    pub fn iter_all() -> impl Clone + ExactSizeIterator<Item = Self> {
        (1..Self::COUNT as u8).map(|x| unsafe { std::mem::transmute(x) })
    }

    /// Returns an iterator over the biomes that are allowed to spawn under the provided
    /// [`Climate`].
    pub fn iter_for_climate(climate: &Climate) -> impl '_ + Clone + Iterator<Item = Self> {
        Self::iter_all().filter(move |&id| id.info().is_climate_allowed(climate))
    }
}

/// Stores information about a particular biome.
#[derive(Debug, Clone)]
pub struct BiomeInfo {
    /// The allowed continentality range for the biome.
    pub continentality_range: (f32, f32),
    /// The allowed temperature range for the biome.
    pub temperature_range: (f32, f32),
    /// The allowed humidity range for the biome.
    pub humidity_range: (f32, f32),
    /// A weight value used to determine how likely the biome is to spawn compared to the other
    /// biomes.
    pub weight: u32,
}

impl BiomeInfo {
    /// Returns whether the provided [`Climate`] is allowed to spawn in a biome with this
    /// [`BiomeInfo`].
    pub fn is_climate_allowed(&self, climate: &Climate) -> bool {
        self.continentality_range.0 <= climate.continentality
            && climate.continentality <= self.continentality_range.1
            && self.temperature_range.0 <= climate.temperature
            && climate.temperature <= self.temperature_range.1
            && self.humidity_range.0 <= climate.humidity
            && climate.humidity <= self.humidity_range.1
    }
}

/// The interface that's provided to biomes to generate new chunks.
pub trait Biome {
    /// Returns the height value of the biome at the provided position.
    fn height(&self, pos: IVec2) -> f32;

    /// Prints debug information about itself in the provided buffer.
    fn debug_info(&self, buf: &mut String, pos: IVec3);
}
