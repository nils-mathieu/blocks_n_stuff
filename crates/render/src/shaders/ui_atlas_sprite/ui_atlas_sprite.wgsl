// Rust counterpart: `src/shaders/common.rs`
struct FrameUniforms {
    projection: mat4x4<f32>,
    inverse_projection: mat4x4<f32>,
    view: mat4x4<f32>,
    inverse_view: mat4x4<f32>,
    resolution: vec2<f32>,
    fog_density: f32,
    fog_distance: f32,
    fog_color: u32,
    sky_color: u32,
    flags: u32,
    milliseconds: u32,
    sun_direction: vec3<f32>,
    fog_height: f32,
}

@group(0) @binding(0)
var<uniform> frame: FrameUniforms;

// The instance data provided by the instance buffer.
struct Instance {
    @location(0) transform: vec4<f32>,
    @location(1) position: vec2<f32>,
    @location(2) texture_id: u32,
    @location(3) color: u32,
}

// The structure that's interpolated accross the trangles
// generated by the vertex shader.
struct Interpolator {
    @builtin(position) position: vec4<f32>,
    @location(0) tex_coords: vec2<f32>,
    @location(1) @interpolate(flat) color: u32,
    @location(2) @interpolate(flat) texture_id: u32,
}

@vertex
fn vs_main(in: Instance, @builtin(vertex_index) vertex_index: u32) -> Interpolator {
    let transform = mat2x2<f32>(in.transform.xy, in.transform.zw);

    var VERTICES: array<vec2<f32>, 4> = array<vec2<f32>, 4>(
        vec2<f32>(0.0, 0.0),
        vec2<f32>(0.0, 1.0),
        vec2<f32>(1.0, 0.0),
        vec2<f32>(1.0, 1.0),
    );
    let vertex_pos = VERTICES[vertex_index];

    let pos = in.position + transform * vertex_pos;

    var out: Interpolator;
    out.position = vec4<f32>(2.0 * pos.x / frame.resolution.x - 1.0, 1.0 - 2.0 * pos.y / frame.resolution.y, 0.0, 1.0);
    out.tex_coords = VERTICES[vertex_index];
    out.color = in.color;
    out.texture_id = in.texture_id;
    return out;
}

// Unpacks the provided color.
fn unpack_color(color: u32) -> vec4<f32> {
    return vec4<f32>(
        f32((color >> 24u) & 0xFFu) / 255.0,
        f32((color >> 16u) & 0xFFu) / 255.0,
        f32((color >> 8u) & 0xFFu) / 255.0,
        f32(color & 0xFFu) / 255.0,
    );
}

@group(1) @binding(0)
var texture_atlas: texture_2d_array<f32>;
@group(1) @binding(1)
var texture_sampler: sampler;

@fragment
fn fs_main(in: Interpolator) -> @location(0) vec4<f32> {
    return textureSample(texture_atlas, texture_sampler, in.tex_coords, in.texture_id) * unpack_color(in.color);
}
