// Rust counterpart: `src/shaders/common.rs`
struct FrameUniforms {
    projection: mat4x4<f32>,
    inverse_projection: mat4x4<f32>,
    view: mat4x4<f32>,
    inverse_view: mat4x4<f32>,
    resolution: vec2<f32>,
    fog_density: f32,
    fog_distance: f32,
    fog_color: u32,
    sky_color: u32,
    flags: u32,
    milliseconds: u32,
}

@group(0) @binding(0)
var<uniform> frame: FrameUniforms;

// The structure that's interpolated accross the trangles
// generated by the vertex shader.
struct Interpolator {
    // The position of the vertex in clip-space coordinates.
    @builtin(position) position: vec4<f32>,
    // The direction that the camera is facing in world-space coordinates.
    @location(0) eye_direction: vec3<f32>,
}

// Turns a 4x4 matrix into a 3x3 matrix by extracting the rotation and scale
// components.
fn extract_rotation_scale(m: mat4x4<f32>) -> mat3x3<f32> {
    return mat3x3<f32>(
        vec3<f32>(m[0].xyz),
        vec3<f32>(m[1].xyz),
        vec3<f32>(m[2].xyz),
    );
}

@vertex
fn vs_main(
    @builtin(vertex_index) vertex_index: u32,
) -> Interpolator {
    let uv = vec2<f32>(f32(vertex_index & 1u), f32(vertex_index >> 1u)) * 2.0 - 1.0;

    var out: Interpolator;
    out.position = vec4<f32>(uv, 0.0, 1.0);
    out.eye_direction = transpose(extract_rotation_scale(frame.view)) * (frame.inverse_projection * vec4<f32>(uv, 0.0, 1.0)).xyz;
    return out;
}

// Unpacks the provided color.
fn unpack_color(color: u32) -> vec4<f32> {
    return vec4<f32>(
        f32((color >> 24u) & 0xFFu) / 255.0,
        f32((color >> 16u) & 0xFFu) / 255.0,
        f32((color >> 8u) & 0xFFu) / 255.0,
        f32(color & 0xFFu) / 255.0,
    );
}

@fragment
fn fs_main(
    in: Interpolator,
) -> @location(0) vec4<f32> {
    let height = in.eye_direction.y;

    if (height > 0.0) {
        return mix(unpack_color(frame.fog_color), unpack_color(frame.sky_color), height);
    } else {
        return unpack_color(frame.fog_color);
    }
}
